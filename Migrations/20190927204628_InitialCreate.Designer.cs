// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using azimuth_api.Models;

namespace azimuth_api.Migrations
{
    [DbContext(typeof(MapContext))]
    [Migration("20190927204628_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("azimuth_api.Models.Coordinate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Lat");

                    b.Property<decimal>("Lng");

                    b.Property<int?>("PolygonId");

                    b.Property<int?>("PolylineId");

                    b.HasKey("Id");

                    b.HasIndex("PolygonId");

                    b.HasIndex("PolylineId");

                    b.ToTable("Coordinate");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Lat = 35.61731m,
                            Lng = -82.56656m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 2L,
                            Lat = 35.61711m,
                            Lng = -82.56626m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 3L,
                            Lat = 35.61717m,
                            Lng = -82.56619m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 4L,
                            Lat = 35.61701m,
                            Lng = -82.56598m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 5L,
                            Lat = 35.61672m,
                            Lng = -82.56631m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 6L,
                            Lat = 35.61688m,
                            Lng = -82.56652m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 7L,
                            Lat = 35.61692m,
                            Lng = -82.56648m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 8L,
                            Lat = 35.61695m,
                            Lng = -82.56649m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 9L,
                            Lat = 35.61697m,
                            Lng = -82.56647m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 10L,
                            Lat = 35.61716m,
                            Lng = -82.56671m,
                            PolygonId = 1
                        },
                        new
                        {
                            Id = 11L,
                            Lat = 35.61726m,
                            Lng = -82.56424m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 12L,
                            Lat = 35.61723m,
                            Lng = -82.56419m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 13L,
                            Lat = 35.61721m,
                            Lng = -82.56412m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 14L,
                            Lat = 35.61716m,
                            Lng = -82.56411m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 15L,
                            Lat = 35.61711m,
                            Lng = -82.56408m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 16L,
                            Lat = 35.61707m,
                            Lng = -82.56412m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 17L,
                            Lat = 35.61702m,
                            Lng = -82.56414m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 18L,
                            Lat = 35.61701m,
                            Lng = -82.5642m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 19L,
                            Lat = 35.61699m,
                            Lng = -82.56426m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 20L,
                            Lat = 35.61702m,
                            Lng = -82.56431m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 21L,
                            Lat = 35.61703m,
                            Lng = -82.56437m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 22L,
                            Lat = 35.61709m,
                            Lng = -82.56438m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 23L,
                            Lat = 35.61713m,
                            Lng = -82.56441m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 24L,
                            Lat = 35.61717m,
                            Lng = -82.56437m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 25L,
                            Lat = 35.61722m,
                            Lng = -82.56437m,
                            PolygonId = 2
                        },
                        new
                        {
                            Id = 26L,
                            Lat = 35.61723m,
                            Lng = -82.56429m,
                            PolygonId = 2
                        });
                });

            modelBuilder.Entity("azimuth_api.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<bool>("Visible");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            Name = "Group 1",
                            Visible = false
                        },
                        new
                        {
                            GroupId = 2,
                            Name = "Group 2",
                            Visible = false
                        });
                });

            modelBuilder.Entity("azimuth_api.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Word");

                    b.HasKey("Id");

                    b.ToTable("Keyword");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Word = "Music"
                        },
                        new
                        {
                            Id = 2,
                            Word = "Moog"
                        },
                        new
                        {
                            Id = 3,
                            Word = "Lecture"
                        },
                        new
                        {
                            Id = 4,
                            Word = "Construction"
                        });
                });

            modelBuilder.Entity("azimuth_api.Models.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("MapId");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            MapId = 1,
                            Name = "Demo Map"
                        });
                });

            modelBuilder.Entity("azimuth_api.Models.MapGroup", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("MapId");

                    b.HasKey("GroupId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("MapGroup");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            MapId = 1
                        },
                        new
                        {
                            GroupId = 2,
                            MapId = 1
                        });
                });

            modelBuilder.Entity("azimuth_api.Models.MapItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Clickable");

                    b.Property<string>("FillColor");

                    b.Property<int?>("GroupId");

                    b.Property<string>("ImageURL");

                    b.Property<long?>("KeyPointId");

                    b.Property<string>("Label");

                    b.Property<string>("Name");

                    b.Property<string>("PageURL");

                    b.Property<string>("StrokeColor");

                    b.Property<string>("Summary");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("KeyPointId");

                    b.ToTable("MapItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Clickable = true,
                            FillColor = "003da5",
                            GroupId = 1,
                            ImageURL = "https://maps.unca.edu/media/map_images/lipinsky-hall-unca.modal_rep.jpg",
                            Label = "Lipinsky Hall",
                            Name = "Lipinsky Hall",
                            PageURL = "https://maps.unca.edu/campus-map/lipinsky-hall",
                            StrokeColor = "ffffff",
                            Summary = "Lipinsky Hall is situated on the north corner of the Quad, next to Ramsey Library. Home to the Bob Moog Electronic Music Studio, the building houses the Department of Music and Lipinsky Auditorium, a 580-seat venue for lectures, music and live performances. UNC Asheville's Office of Institutional Research, Effectiveness, and Planning is also located in Lipinsky Hall.",
                            Visible = true
                        },
                        new
                        {
                            Id = 2,
                            Clickable = true,
                            FillColor = "003da5",
                            GroupId = 2,
                            ImageURL = "https://maps.unca.edu/media/map_images/lipinsky-hall-unca.modal_rep.jpg",
                            Label = "Mullen & James Humanities Hall",
                            Name = "Mullen & James Humanities Hall",
                            PageURL = "https://maps.unca.edu/campus-map/lipinsky-hall",
                            StrokeColor = "ffffff",
                            Summary = @"*Fall 2019: Under construction*
Mullen & James Humanities Hall, adjoining Carmichael Hall, seats 330 in a semicircular auditorium-style arrangement for humanities lectures and special events. Its unusual pleated roof lines may be seen from the entrance to UNC Asheville on University Heights. Mullen & James Humanities Hall was renovated and updated in 2013.",
                            Visible = true
                        });
                });

            modelBuilder.Entity("azimuth_api.Models.MapItemKeyword", b =>
                {
                    b.Property<int>("KeywordId");

                    b.Property<int>("MapItemId");

                    b.HasKey("KeywordId", "MapItemId");

                    b.HasIndex("MapItemId");

                    b.ToTable("MapItemKeyword");

                    b.HasData(
                        new
                        {
                            KeywordId = 1,
                            MapItemId = 1
                        },
                        new
                        {
                            KeywordId = 2,
                            MapItemId = 1
                        },
                        new
                        {
                            KeywordId = 3,
                            MapItemId = 2
                        },
                        new
                        {
                            KeywordId = 4,
                            MapItemId = 2
                        });
                });

            modelBuilder.Entity("azimuth_api.Models.MapTour", b =>
                {
                    b.Property<int>("TourId");

                    b.Property<int>("MapId");

                    b.HasKey("TourId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("MapTour");
                });

            modelBuilder.Entity("azimuth_api.Models.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DataId");

                    b.Property<string>("Icon");

                    b.Property<int?>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("ItemId");

                    b.ToTable("Marker");
                });

            modelBuilder.Entity("azimuth_api.Models.Polygon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Polygon");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 2
                        });
                });

            modelBuilder.Entity("azimuth_api.Models.Polyline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Polyline");
                });

            modelBuilder.Entity("azimuth_api.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TourId");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("azimuth_api.Models.TourMapItem", b =>
                {
                    b.Property<int>("TourId");

                    b.Property<int>("MapItemId");

                    b.Property<int>("Order");

                    b.HasKey("TourId", "MapItemId");

                    b.HasIndex("MapItemId");

                    b.ToTable("TourMapItem");
                });

            modelBuilder.Entity("azimuth_api.Models.Coordinate", b =>
                {
                    b.HasOne("azimuth_api.Models.Polygon")
                        .WithMany("Data")
                        .HasForeignKey("PolygonId");

                    b.HasOne("azimuth_api.Models.Polyline")
                        .WithMany("Data")
                        .HasForeignKey("PolylineId");
                });

            modelBuilder.Entity("azimuth_api.Models.MapGroup", b =>
                {
                    b.HasOne("azimuth_api.Models.Group", "Group")
                        .WithMany("MapGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("azimuth_api.Models.Map", "Map")
                        .WithMany("MapGroups")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("azimuth_api.Models.MapItem", b =>
                {
                    b.HasOne("azimuth_api.Models.Group")
                        .WithMany("MapItems")
                        .HasForeignKey("GroupId");

                    b.HasOne("azimuth_api.Models.Coordinate", "KeyPoint")
                        .WithMany()
                        .HasForeignKey("KeyPointId");
                });

            modelBuilder.Entity("azimuth_api.Models.MapItemKeyword", b =>
                {
                    b.HasOne("azimuth_api.Models.Keyword", "Keyword")
                        .WithMany("MapItemKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("azimuth_api.Models.MapItem", "MapItem")
                        .WithMany("MapItemKeywords")
                        .HasForeignKey("MapItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("azimuth_api.Models.MapTour", b =>
                {
                    b.HasOne("azimuth_api.Models.Map", "Map")
                        .WithMany("MapTours")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("azimuth_api.Models.Tour", "Tour")
                        .WithMany("MapTours")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("azimuth_api.Models.Marker", b =>
                {
                    b.HasOne("azimuth_api.Models.Coordinate", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("azimuth_api.Models.MapItem", "Item")
                        .WithMany("Markers")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("azimuth_api.Models.Polygon", b =>
                {
                    b.HasOne("azimuth_api.Models.MapItem", "Item")
                        .WithMany("Polygons")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("azimuth_api.Models.Polyline", b =>
                {
                    b.HasOne("azimuth_api.Models.MapItem", "Item")
                        .WithMany("Polylines")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("azimuth_api.Models.TourMapItem", b =>
                {
                    b.HasOne("azimuth_api.Models.MapItem", "MapItem")
                        .WithMany("TourMapItems")
                        .HasForeignKey("MapItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("azimuth_api.Models.Tour", "Tour")
                        .WithMany("TourMapItems")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
