// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using azimuth_api.Models;

namespace azimuth_api.Migrations
{
    [DbContext(typeof(MapContext))]
    [Migration("20190925155105_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("azimuth_api.Models.Coordinate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Lat");

                    b.Property<float>("Lng");

                    b.Property<int?>("PolygonId");

                    b.Property<int?>("PolylineId");

                    b.HasKey("Id");

                    b.HasIndex("PolygonId");

                    b.HasIndex("PolylineId");

                    b.ToTable("Coordinate");
                });

            modelBuilder.Entity("azimuth_api.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<bool>("Visible");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("azimuth_api.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Word");

                    b.HasKey("Id");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("azimuth_api.Models.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("MapId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("azimuth_api.Models.MapGroup", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("MapId");

                    b.HasKey("GroupId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("MapGroup");
                });

            modelBuilder.Entity("azimuth_api.Models.MapItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Clickable");

                    b.Property<string>("FillColor");

                    b.Property<int?>("GroupId");

                    b.Property<string>("ImageURL");

                    b.Property<long?>("KeyPointId");

                    b.Property<string>("Label");

                    b.Property<string>("Name");

                    b.Property<string>("PageURL");

                    b.Property<string>("StrokeColor");

                    b.Property<string>("Summary");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("KeyPointId");

                    b.ToTable("MapItems");
                });

            modelBuilder.Entity("azimuth_api.Models.MapItemKeyword", b =>
                {
                    b.Property<int>("KeywordId");

                    b.Property<int>("MapItemId");

                    b.HasKey("KeywordId", "MapItemId");

                    b.HasIndex("MapItemId");

                    b.ToTable("MapItemKeyword");
                });

            modelBuilder.Entity("azimuth_api.Models.MapTour", b =>
                {
                    b.Property<int>("TourId");

                    b.Property<int>("MapId");

                    b.HasKey("TourId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("MapTour");
                });

            modelBuilder.Entity("azimuth_api.Models.Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DataId");

                    b.Property<string>("Icon");

                    b.Property<int?>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("ItemId");

                    b.ToTable("Marker");
                });

            modelBuilder.Entity("azimuth_api.Models.Polygon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Polygon");
                });

            modelBuilder.Entity("azimuth_api.Models.Polyline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Polyline");
                });

            modelBuilder.Entity("azimuth_api.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TourId");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("azimuth_api.Models.TourMapItem", b =>
                {
                    b.Property<int>("TourId");

                    b.Property<int>("MapItemId");

                    b.Property<int>("Order");

                    b.HasKey("TourId", "MapItemId");

                    b.HasIndex("MapItemId");

                    b.ToTable("TourMapItem");
                });

            modelBuilder.Entity("azimuth_api.Models.Coordinate", b =>
                {
                    b.HasOne("azimuth_api.Models.Polygon")
                        .WithMany("Data")
                        .HasForeignKey("PolygonId");

                    b.HasOne("azimuth_api.Models.Polyline")
                        .WithMany("Data")
                        .HasForeignKey("PolylineId");
                });

            modelBuilder.Entity("azimuth_api.Models.MapGroup", b =>
                {
                    b.HasOne("azimuth_api.Models.Group", "Group")
                        .WithMany("MapGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("azimuth_api.Models.Map", "Map")
                        .WithMany("MapGroups")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("azimuth_api.Models.MapItem", b =>
                {
                    b.HasOne("azimuth_api.Models.Group")
                        .WithMany("MapItems")
                        .HasForeignKey("GroupId");

                    b.HasOne("azimuth_api.Models.Coordinate", "KeyPoint")
                        .WithMany()
                        .HasForeignKey("KeyPointId");
                });

            modelBuilder.Entity("azimuth_api.Models.MapItemKeyword", b =>
                {
                    b.HasOne("azimuth_api.Models.Keyword", "Keyword")
                        .WithMany("MapItemKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("azimuth_api.Models.MapItem", "MapItem")
                        .WithMany("MapItemKeywords")
                        .HasForeignKey("MapItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("azimuth_api.Models.MapTour", b =>
                {
                    b.HasOne("azimuth_api.Models.Map", "Map")
                        .WithMany("MapTours")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("azimuth_api.Models.Tour", "Tour")
                        .WithMany("MapTours")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("azimuth_api.Models.Marker", b =>
                {
                    b.HasOne("azimuth_api.Models.Coordinate", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("azimuth_api.Models.MapItem", "Item")
                        .WithMany("Markers")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("azimuth_api.Models.Polygon", b =>
                {
                    b.HasOne("azimuth_api.Models.MapItem", "Item")
                        .WithMany("Polygons")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("azimuth_api.Models.Polyline", b =>
                {
                    b.HasOne("azimuth_api.Models.MapItem", "Item")
                        .WithMany("Polylines")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("azimuth_api.Models.TourMapItem", b =>
                {
                    b.HasOne("azimuth_api.Models.MapItem", "MapItem")
                        .WithMany("TourMapItems")
                        .HasForeignKey("MapItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("azimuth_api.Models.Tour", "Tour")
                        .WithMany("TourMapItems")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
